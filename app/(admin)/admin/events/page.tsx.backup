'use client'

import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { 
  Search, 
  Filter, 
  Plus,
  MoreHorizontal,
  Edit,
  Eye,
  Trash2,
  Calendar,
  Clock,
  MapPin,
  Users,
  DollarSign,
  Globe,
  Lock,
  RefreshCw,
  X,
  CheckCircle
} from 'lucide-react'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog'
import { Label } from '@/components/ui/label'
import { Switch } from '@/components/ui/switch'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'

interface Event {
  id: string
  title: string
  description: string
  type: 'WORKSHOP' | 'WEBINAR' | 'SEMINAR' | 'CONFERENCE'
  startDate: string
  endDate: string | null
  location: string | null
  price: number | null
  currency: string
  maxAttendees: number | null
  isPublished: boolean
  createdAt: string
  updatedAt: string
}

interface EventRegistration {
  id: string
  eventId: string
  fullName: string
  email: string
  phone: string | null
  company: string | null
  jobTitle: string | null
  dietaryRequirements: string | null
  specialRequests: string | null
  emergencyContact: string | null
  emergencyPhone: string | null
  amountUSD: number
  currency: string
  status: 'PENDING' | 'CONFIRMED' | 'CANCELLED' | 'COMPLETED'
  createdAt: string
  event: {
    id: string
    title: string
    type: string
    startDate: string
    location: string | null
  }
  user: {
    id: string
    name: string | null
    email: string
  }
}

export default function EventsPage() {
  const [events, setEvents] = useState<Event[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [typeFilter, setTypeFilter] = useState('all')
  const [pricingFilter, setPricingFilter] = useState('all')
  const [showEventForm, setShowEventForm] = useState(false)
  const [editingEvent, setEditingEvent] = useState<Event | null>(null)
  const [isSaving, setIsSaving] = useState(false)
  const [isDeleting, setIsDeleting] = useState(false)
  const [eventToDelete, setEventToDelete] = useState<Event | null>(null)
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false)
  const [registrations, setRegistrations] = useState<EventRegistration[]>([])
  const [isLoadingRegistrations, setIsLoadingRegistrations] = useState(false)
  const [registrationSearchTerm, setRegistrationSearchTerm] = useState('')
  const [registrationStatusFilter, setRegistrationStatusFilter] = useState('all')
  const [selectedEventFilter, setSelectedEventFilter] = useState('all')

  // Form state
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    type: 'WORKSHOP' as const,
    startDate: '',
    endDate: '',
    location: '',
    price: '',
    currency: 'USD',
    maxAttendees: '',
    isPublished: false
  })

  const fetchEvents = async () => {
    setIsLoading(true)
    try {
      const response = await fetch('/api/admin/events')
      if (!response.ok) {
        throw new Error('Failed to fetch events')
      }
      const data = await response.json()
      setEvents(data.events || [])
    } catch (error) {
      console.error('Failed to fetch events:', error)
      setEvents([])
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    fetchEvents()
    fetchRegistrations()
  }, [])

  const fetchRegistrations = async () => {
    setIsLoadingRegistrations(true)
    try {
      const response = await fetch('/api/admin/events/registrations')
      if (!response.ok) {
        throw new Error('Failed to fetch registrations')
      }
      const data = await response.json()
      setRegistrations(data.registrations || [])
    } catch (error) {
      console.error('Failed to fetch registrations:', error)
      setRegistrations([])
    } finally {
      setIsLoadingRegistrations(false)
    }
  }

  const filteredEvents = events.filter(event => {
    const matchesSearch = event.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         event.description.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesType = typeFilter === 'all' || event.type === typeFilter
    const matchesPricing = pricingFilter === 'all' || 
                          (pricingFilter === 'free' && event.price === 0) ||
                          (pricingFilter === 'paid' && event.price && event.price > 0)
    
    return matchesSearch && matchesType && matchesPricing
  })

  const filteredRegistrations = registrations.filter(registration => {
    const matchesSearch = registration.fullName.toLowerCase().includes(registrationSearchTerm.toLowerCase()) ||
                         registration.email.toLowerCase().includes(registrationSearchTerm.toLowerCase()) ||
                         registration.company?.toLowerCase().includes(registrationSearchTerm.toLowerCase()) ||
                         registration.event.title.toLowerCase().includes(registrationSearchTerm.toLowerCase())
    const matchesStatus = registrationStatusFilter === 'all' || registration.status === registrationStatusFilter
    const matchesEvent = selectedEventFilter === 'all' || registration.event.id === selectedEventFilter
    
    return matchesSearch && matchesStatus && matchesEvent
  })

  const handleCreateEvent = () => {
    setEditingEvent(null)
    setFormData({
      title: '',
      description: '',
      type: 'WORKSHOP',
      startDate: '',
      endDate: '',
      location: '',
      price: '',
      currency: 'USD',
      maxAttendees: '',
      isPublished: false
    })
    setShowEventForm(true)
  }

  const handleEditEvent = (event: Event) => {
    setEditingEvent(event)
    setFormData({
      title: event.title,
      description: event.description,
      type: event.type,
      startDate: event.startDate.split('T')[0] + 'T' + event.startDate.split('T')[1].substring(0, 5),
      endDate: event.endDate ? event.endDate.split('T')[0] + 'T' + event.endDate.split('T')[1].substring(0, 5) : '',
      location: event.location || '',
      price: event.price?.toString() || '',
      currency: event.currency,
      maxAttendees: event.maxAttendees?.toString() || '',
      isPublished: event.isPublished
    })
    setShowEventForm(true)
  }

  const handleSaveEvent = async () => {
    setIsSaving(true)
    try {
      const eventData = {
        ...formData,
        price: formData.price ? parseFloat(formData.price) : 0,
        maxAttendees: formData.maxAttendees ? parseInt(formData.maxAttendees) : undefined,
        startDate: new Date(formData.startDate).toISOString(),
        endDate: formData.endDate ? new Date(formData.endDate).toISOString() : undefined
      }

      const url = editingEvent ? '/api/admin/events' : '/api/admin/events'
      const method = editingEvent ? 'PUT' : 'POST'
      
      if (editingEvent) {
        eventData.id = editingEvent.id
      }

      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(eventData),
      })

      if (!response.ok) {
        throw new Error('Failed to save event')
      }

      await fetchEvents()
      setShowEventForm(false)
      setEditingEvent(null)
    } catch (error) {
      console.error('Failed to save event:', error)
      alert('Failed to save event. Please try again.')
    } finally {
      setIsSaving(false)
    }
  }

  const handleDeleteEvent = async (event: Event) => {
    setEventToDelete(event)
    setShowDeleteConfirm(true)
  }

  const confirmDelete = async () => {
    if (!eventToDelete) return

    setIsDeleting(true)
    try {
      const response = await fetch(`/api/admin/events?id=${eventToDelete.id}`, {
        method: 'DELETE',
      })

      if (!response.ok) {
        throw new Error('Failed to delete event')
      }

      await fetchEvents()
      setShowDeleteConfirm(false)
      setEventToDelete(null)
    } catch (error) {
      console.error('Failed to delete event:', error)
      alert('Failed to delete event. Please try again.')
    } finally {
      setIsDeleting(false)
    }
  }

  const handleUpdateRegistrationStatus = async (registrationId: string, status: string) => {
    try {
      const response = await fetch('/api/admin/events/registrations', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          registrationId,
          status
        }),
      })

      if (!response.ok) {
        throw new Error('Failed to update registration status')
      }

      await fetchRegistrations()
    } catch (error) {
      console.error('Failed to update registration status:', error)
      alert('Failed to update registration status. Please try again.')
    }
  }

  const getEventTypeColor = (type: string) => {
    switch (type) {
      case 'WORKSHOP': return 'xen-blue'
      case 'WEBINAR': return 'xen-green'
      case 'SEMINAR': return 'xen-purple'
      case 'CONFERENCE': return 'xen-orange'
      default: return 'default'
    }
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'short', 
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  const formatPrice = (price: number | null, currency: string) => {
    if (price === null || price === 0) return 'FREE'
    return `$${price} ${currency}`
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <div className="space-y-8">
        {/* Header Section */}
        <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-8">
          <div className="flex items-center justify-between">
            <div className="space-y-2">
              <div className="flex items-center space-x-3">
                <div className="p-3 rounded-xl bg-gradient-to-r from-xen-orange to-orange-600">
                  <Calendar className="h-8 w-8 text-white" />
                </div>
                <div>
                  <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Events Management</h1>
                  <p className="text-gray-600 dark:text-gray-400">Manage workshops, webinars, seminars, and conferences</p>
                </div>
              </div>
            </div>
            <Button 
              onClick={handleCreateEvent} 
              className="bg-gradient-to-r from-xen-orange to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white shadow-lg hover:shadow-xl transition-all duration-200 px-6 py-3"
            >
              <Plus className="h-5 w-5 mr-2" />
              Create Event
            </Button>
          </div>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <Card className="bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 border-blue-200 dark:border-blue-700 hover:shadow-lg transition-all duration-200">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-blue-600 dark:text-blue-400">Total Events</p>
                  <p className="text-3xl font-bold text-blue-900 dark:text-blue-100">{events.length}</p>
                </div>
                <div className="p-3 rounded-xl bg-blue-500">
                  <Calendar className="h-6 w-6 text-white" />
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card className="bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 border-green-200 dark:border-green-700 hover:shadow-lg transition-all duration-200">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-green-600 dark:text-green-400">Published</p>
                  <p className="text-3xl font-bold text-green-900 dark:text-green-100">
                    {events.filter(e => e.isPublished).length}
                  </p>
                </div>
                <div className="p-3 rounded-xl bg-green-500">
                  <Globe className="h-6 w-6 text-white" />
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card className="bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-800/20 border-purple-200 dark:border-purple-700 hover:shadow-lg transition-all duration-200">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-purple-600 dark:text-purple-400">Paid Events</p>
                  <p className="text-3xl font-bold text-purple-900 dark:text-purple-100">
                    {events.filter(e => e.price && e.price > 0).length}
                  </p>
                </div>
                <div className="p-3 rounded-xl bg-purple-500">
                  <DollarSign className="h-6 w-6 text-white" />
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card className="bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-900/20 dark:to-orange-800/20 border-orange-200 dark:border-orange-700 hover:shadow-lg transition-all duration-200">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-orange-600 dark:text-orange-400">Total Capacity</p>
                  <p className="text-3xl font-bold text-orange-900 dark:text-orange-100">
                    {events.reduce((acc, e) => acc + (e.maxAttendees || 0), 0)}
                  </p>
                </div>
                <div className="p-3 rounded-xl bg-orange-500">
                  <Users className="h-6 w-6 text-white" />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Filters */}
        <Card className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700">
          <CardContent className="p-6">
            <div className="flex flex-col lg:flex-row gap-4">
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                  <Input
                    placeholder="Search events by title or description..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-12 h-12 text-base border-gray-300 dark:border-gray-600 focus:border-xen-orange focus:ring-xen-orange/20"
                  />
                </div>
              </div>
              <div className="flex flex-col sm:flex-row gap-3">
                <Select value={typeFilter} onValueChange={setTypeFilter}>
                  <SelectTrigger className="w-full sm:w-48 h-12 border-gray-300 dark:border-gray-600 focus:border-xen-orange focus:ring-xen-orange/20">
                    <SelectValue placeholder="All Types" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Types</SelectItem>
                    <SelectItem value="WORKSHOP">Workshop</SelectItem>
                    <SelectItem value="WEBINAR">Webinar</SelectItem>
                    <SelectItem value="SEMINAR">Seminar</SelectItem>
                    <SelectItem value="CONFERENCE">Conference</SelectItem>
                  </SelectContent>
                </Select>
                <Select value={pricingFilter} onValueChange={setPricingFilter}>
                  <SelectTrigger className="w-full sm:w-48 h-12 border-gray-300 dark:border-gray-600 focus:border-xen-orange focus:ring-xen-orange/20">
                    <SelectValue placeholder="All Pricing" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Pricing</SelectItem>
                    <SelectItem value="free">Free</SelectItem>
                    <SelectItem value="paid">Paid</SelectItem>
                  </SelectContent>
                </Select>
                <Button 
                  variant="outline" 
                  onClick={fetchEvents}
                  className="h-12 px-6 border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700"
                >
                  <RefreshCw className="h-5 w-5 mr-2" />
                  Refresh
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Main Content Tabs */}
        <Tabs defaultValue="events" className="space-y-6">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="events">Events Management</TabsTrigger>
            <TabsTrigger value="registrations">Registrations ({registrations.length})</TabsTrigger>
          </TabsList>

          <TabsContent value="events" className="space-y-6">
            {/* Events Grid */}
            <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold text-gray-900 dark:text-white">Events ({filteredEvents.length})</h2>
            <p className="text-gray-600 dark:text-gray-400">Manage all events in your system</p>
          </div>
        </div>

        {isLoading ? (
          <div className="flex items-center justify-center py-12">
            <RefreshCw className="h-8 w-8 animate-spin text-xen-orange" />
            <span className="ml-3 text-lg text-gray-600 dark:text-gray-400">Loading events...</span>
          </div>
        ) : filteredEvents.length === 0 ? (
          <Card className="p-12 text-center">
            <Calendar className="h-16 w-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">No events found</h3>
            <p className="text-gray-600 dark:text-gray-400 mb-6">Get started by creating your first event</p>
            <Button onClick={handleCreateEvent} className="bg-xen-orange hover:bg-xen-orange/90">
              <Plus className="h-4 w-4 mr-2" />
              Create Event
            </Button>
          </Card>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredEvents.map((event) => (
              <Card key={event.id} className="group hover:shadow-xl transition-all duration-300 border-0 shadow-lg bg-white dark:bg-gray-800">
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        <Badge variant={getEventTypeColor(event.type) as any} className="text-xs">
                          {event.type}
                        </Badge>
                        {event.isPublished ? (
                          <Badge variant="xen-green" className="text-xs">Published</Badge>
                        ) : (
                          <Badge variant="xen-orange" className="text-xs">Draft</Badge>
                        )}
                      </div>
                      <CardTitle className="text-lg font-bold text-gray-900 dark:text-white group-hover:text-xen-orange transition-colors duration-200 overflow-hidden text-ellipsis" style={{ display: '-webkit-box', WebkitLineClamp: 2, WebkitBoxOrient: 'vertical' }}>
                        {event.title}
                      </CardTitle>
                      <CardDescription className="text-sm text-gray-600 dark:text-gray-400 mt-2 overflow-hidden text-ellipsis" style={{ display: '-webkit-box', WebkitLineClamp: 2, WebkitBoxOrient: 'vertical' }}>
                        {event.description}
                      </CardDescription>
                    </div>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" className="h-8 w-8 p-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuLabel>Actions</DropdownMenuLabel>
                        <DropdownMenuItem onClick={() => handleEditEvent(event)}>
                          <Edit className="h-4 w-4 mr-2" />
                          Edit
                        </DropdownMenuItem>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem 
                          onClick={() => handleDeleteEvent(event)}
                          className="text-red-600"
                        >
                          <Trash2 className="h-4 w-4 mr-2" />
                          Delete
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>
                </CardHeader>
                
                <CardContent className="space-y-4">
                  {/* Event Details */}
                  <div className="space-y-3">
                    <div className="flex items-center text-sm text-gray-600 dark:text-gray-400">
                      <Calendar className="h-4 w-4 mr-3 text-xen-orange" />
                      <div>
                        <div className="font-medium">{formatDate(event.startDate)}</div>
                        {event.endDate && (
                          <div className="text-xs text-gray-500">
                            to {formatDate(event.endDate)}
                          </div>
                        )}
                      </div>
                    </div>
                    
                    <div className="flex items-center text-sm text-gray-600 dark:text-gray-400">
                      <MapPin className="h-4 w-4 mr-3 text-xen-orange" />
                      <span className="truncate">{event.location || 'Online'}</span>
                    </div>
                    
                    <div className="flex items-center text-sm text-gray-600 dark:text-gray-400">
                      <Users className="h-4 w-4 mr-3 text-xen-orange" />
                      <span>{event.maxAttendees ? `Max ${event.maxAttendees} attendees` : 'Unlimited capacity'}</span>
                    </div>
                  </div>

                  {/* Price Section */}
                  <div className="pt-3 border-t border-gray-200 dark:border-gray-700">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center text-sm text-gray-600 dark:text-gray-400">
                        <DollarSign className="h-4 w-4 mr-2" />
                        <span>Price</span>
                      </div>
                      <div className={`text-lg font-bold ${event.price === 0 ? 'text-xen-green' : 'text-gray-900 dark:text-white'}`}>
                        {formatPrice(event.price, event.currency)}
                      </div>
                    </div>
                  </div>

                  {/* Action Buttons */}
                  <div className="pt-3 border-t border-gray-200 dark:border-gray-700">
                    <div className="flex gap-2">
                      <Button 
                        onClick={() => handleEditEvent(event)}
                        variant="outline" 
                        size="sm" 
                        className="flex-1 hover:bg-xen-orange hover:text-white hover:border-xen-orange transition-colors duration-200"
                      >
                        <Edit className="h-4 w-4 mr-2" />
                        Edit
                      </Button>
                      <Button 
                        onClick={() => handleDeleteEvent(event)}
                        variant="outline" 
                        size="sm" 
                        className="hover:bg-red-500 hover:text-white hover:border-red-500 transition-colors duration-200"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
            </div>
          </TabsContent>

          <TabsContent value="registrations" className="space-y-6">
            {/* Registrations Management */}
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-2xl font-bold text-gray-900 dark:text-white">Event Registrations ({filteredRegistrations.length})</h2>
                  <p className="text-gray-600 dark:text-gray-400">Manage all event registrations and attendees</p>
                </div>
              </div>

              {/* Registration Filters */}
              <Card className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700">
                <CardContent className="p-6">
                  <div className="flex flex-col lg:flex-row gap-4">
                    <div className="flex-1">
                      <div className="relative">
                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                        <Input
                          placeholder="Search registrations by name, email, or company..."
                          value={registrationSearchTerm}
                          onChange={(e) => setRegistrationSearchTerm(e.target.value)}
                          className="pl-12 h-12 text-base border-gray-300 dark:border-gray-600 focus:border-xen-orange focus:ring-xen-orange/20"
                        />
                      </div>
                    </div>
                    <div className="flex flex-col sm:flex-row gap-3">
                      <Select value={registrationStatusFilter} onValueChange={setRegistrationStatusFilter}>
                        <SelectTrigger className="w-full sm:w-48 h-12 border-gray-300 dark:border-gray-600 focus:border-xen-orange focus:ring-xen-orange/20">
                          <SelectValue placeholder="All Status" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="all">All Status</SelectItem>
                          <SelectItem value="PENDING">Pending</SelectItem>
                          <SelectItem value="CONFIRMED">Confirmed</SelectItem>
                          <SelectItem value="CANCELLED">Cancelled</SelectItem>
                          <SelectItem value="COMPLETED">Completed</SelectItem>
                        </SelectContent>
                      </Select>
                      <Select value={selectedEventFilter} onValueChange={setSelectedEventFilter}>
                        <SelectTrigger className="w-full sm:w-48 h-12 border-gray-300 dark:border-gray-600 focus:border-xen-orange focus:ring-xen-orange/20">
                          <SelectValue placeholder="All Events" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="all">All Events</SelectItem>
                          {events.map(event => (
                            <SelectItem key={event.id} value={event.id}>{event.title}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <Button 
                        variant="outline" 
                        onClick={fetchRegistrations}
                        className="h-12 px-6 border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700"
                      >
                        <RefreshCw className="h-5 w-5 mr-2" />
                        Refresh
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Registrations Table */}
              <Card className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700">
                <CardContent className="p-0">
                  {isLoadingRegistrations ? (
                    <div className="flex items-center justify-center py-12">
                      <RefreshCw className="h-8 w-8 animate-spin text-xen-orange" />
                      <span className="ml-3 text-lg text-gray-600 dark:text-gray-400">Loading registrations...</span>
                    </div>
                  ) : filteredRegistrations.length === 0 ? (
                    <div className="text-center py-12">
                      <Users className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                      <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">No registrations found</h3>
                      <p className="text-gray-600 dark:text-gray-400">No registrations match your current filters</p>
                    </div>
                  ) : (
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Attendee</TableHead>
                          <TableHead>Event</TableHead>
                          <TableHead>Contact</TableHead>
                          <TableHead>Company</TableHead>
                          <TableHead>Amount</TableHead>
                          <TableHead>Status</TableHead>
                          <TableHead>Registered</TableHead>
                          <TableHead className="text-right">Actions</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {filteredRegistrations.map((registration) => (
                          <TableRow key={registration.id}>
                            <TableCell>
                              <div>
                                <div className="font-medium">{registration.fullName}</div>
                                <div className="text-sm text-gray-500">{registration.jobTitle || 'No title'}</div>
                              </div>
                            </TableCell>
                            <TableCell>
                              <div>
                                <div className="font-medium">{registration.event.title}</div>
                                <div className="text-sm text-gray-500">{registration.event.type}</div>
                              </div>
                            </TableCell>
                            <TableCell>
                              <div>
                                <div className="text-sm">{registration.email}</div>
                                {registration.phone && (
                                  <div className="text-sm text-gray-500">{registration.phone}</div>
                                )}
                              </div>
                            </TableCell>
                            <TableCell>
                              <div className="text-sm">{registration.company || 'N/A'}</div>
                            </TableCell>
                            <TableCell>
                              <div className="text-sm font-medium">
                                {registration.amountUSD === 0 ? 'FREE' : `$${registration.amountUSD} ${registration.currency}`}
                              </div>
                            </TableCell>
                            <TableCell>
                              <Select
                                value={registration.status}
                                onValueChange={(value) => handleUpdateRegistrationStatus(registration.id, value)}
                              >
                                <SelectTrigger className="w-32">
                                  <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="PENDING">Pending</SelectItem>
                                  <SelectItem value="CONFIRMED">Confirmed</SelectItem>
                                  <SelectItem value="CANCELLED">Cancelled</SelectItem>
                                  <SelectItem value="COMPLETED">Completed</SelectItem>
                                </SelectContent>
                              </Select>
                            </TableCell>
                            <TableCell>
                              <div className="text-sm text-gray-500">
                                {new Date(registration.createdAt).toLocaleDateString()}
                              </div>
                            </TableCell>
                            <TableCell className="text-right">
                              <DropdownMenu>
                                <DropdownMenuTrigger asChild>
                                  <Button variant="ghost" className="h-8 w-8 p-0">
                                    <MoreHorizontal className="h-4 w-4" />
                                  </Button>
                                </DropdownMenuTrigger>
                                <DropdownMenuContent align="end">
                                  <DropdownMenuLabel>Actions</DropdownMenuLabel>
                                  <DropdownMenuItem>
                                    <Eye className="h-4 w-4 mr-2" />
                                    View Details
                                  </DropdownMenuItem>
                                  <DropdownMenuSeparator />
                                  <DropdownMenuItem 
                                    onClick={() => handleUpdateRegistrationStatus(registration.id, 'CONFIRMED')}
                                  >
                                    <CheckCircle className="h-4 w-4 mr-2" />
                                    Confirm
                                  </DropdownMenuItem>
                                  <DropdownMenuItem 
                                    onClick={() => handleUpdateRegistrationStatus(registration.id, 'CANCELLED')}
                                    className="text-red-600"
                                  >
                                    <X className="h-4 w-4 mr-2" />
                                    Cancel
                                  </DropdownMenuItem>
                                </DropdownMenuContent>
                              </DropdownMenu>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>

      {/* Event Form Dialog */}
      <Dialog open={showEventForm} onOpenChange={setShowEventForm}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>
              {editingEvent ? 'Edit Event' : 'Create New Event'}
            </DialogTitle>
            <DialogDescription>
              {editingEvent ? 'Update the event details below.' : 'Fill in the details to create a new event.'}
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="title">Event Title</Label>
                <Input
                  id="title"
                  value={formData.title}
                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                  placeholder="Enter event title"
                />
              </div>
              <div>
                <Label htmlFor="type">Event Type</Label>
                <Select value={formData.type} onValueChange={(value) => setFormData({ ...formData, type: value as any })}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="WORKSHOP">Workshop</SelectItem>
                    <SelectItem value="WEBINAR">Webinar</SelectItem>
                    <SelectItem value="SEMINAR">Seminar</SelectItem>
                    <SelectItem value="CONFERENCE">Conference</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            <div>
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                placeholder="Enter event description"
                rows={3}
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="startDate">Start Date & Time</Label>
                <Input
                  id="startDate"
                  type="datetime-local"
                  value={formData.startDate}
                  onChange={(e) => setFormData({ ...formData, startDate: e.target.value })}
                />
              </div>
              <div>
                <Label htmlFor="endDate">End Date & Time (Optional)</Label>
                <Input
                  id="endDate"
                  type="datetime-local"
                  value={formData.endDate}
                  onChange={(e) => setFormData({ ...formData, endDate: e.target.value })}
                />
              </div>
            </div>

            <div>
              <Label htmlFor="location">Location</Label>
              <Input
                id="location"
                value={formData.location}
                onChange={(e) => setFormData({ ...formData, location: e.target.value })}
                placeholder="Enter location or 'Online'"
              />
            </div>

            <div className="grid grid-cols-3 gap-4">
              <div>
                <Label htmlFor="price">Price (USD)</Label>
                <Input
                  id="price"
                  type="number"
                  min="0"
                  step="0.01"
                  value={formData.price}
                  onChange={(e) => setFormData({ ...formData, price: e.target.value })}
                  placeholder="0.00"
                />
              </div>
              <div>
                <Label htmlFor="currency">Currency</Label>
                <Select value={formData.currency} onValueChange={(value) => setFormData({ ...formData, currency: value })}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="USD">USD</SelectItem>
                    <SelectItem value="EUR">EUR</SelectItem>
                    <SelectItem value="GBP">GBP</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="maxAttendees">Max Attendees</Label>
                <Input
                  id="maxAttendees"
                  type="number"
                  min="1"
                  value={formData.maxAttendees}
                  onChange={(e) => setFormData({ ...formData, maxAttendees: e.target.value })}
                  placeholder="Unlimited"
                />
              </div>
            </div>

            <div className="flex items-center space-x-2">
              <Switch
                id="isPublished"
                checked={formData.isPublished}
                onCheckedChange={(checked) => setFormData({ ...formData, isPublished: checked })}
              />
              <Label htmlFor="isPublished">Publish event</Label>
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowEventForm(false)}>
              Cancel
            </Button>
            <Button onClick={handleSaveEvent} disabled={isSaving}>
              {isSaving ? 'Saving...' : editingEvent ? 'Update Event' : 'Create Event'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <Dialog open={showDeleteConfirm} onOpenChange={setShowDeleteConfirm}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Delete Event</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete "{eventToDelete?.title}"? This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowDeleteConfirm(false)}>
              Cancel
            </Button>
            <Button variant="destructive" onClick={confirmDelete} disabled={isDeleting}>
              {isDeleting ? 'Deleting...' : 'Delete Event'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
