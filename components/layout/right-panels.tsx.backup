'use client'

import React, { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Switch } from '@/components/ui/switch'
import { Activity, AlertCircle, BarChart3, Bell, BookOpen, Building, Calculator, Calendar, CheckCircle, CheckSquare, Crown, DollarSign, Eye, EyeOff, Gift, GraduationCap, Hand, Headphones, Heart, HelpCircle, Home, Info, Lock, Megaphone, MessageCircle, MessageSquare, Settings, Shield, Star, Target, TrendingUp, Trophy, Users, X } from 'lucide-react'
import { calculateLotSize as calculateLotSizeUtil, getSpread, calculateSwapCost } from '@/lib/utils'
import { useTheme } from '@/lib/optimized-theme-context'
import { useNotifications } from '@/lib/notifications-context'
import { useSession } from 'next-auth/react'

interface RightPanelsProps {
  isForecastOpen: boolean
  isCalculatorOpen: boolean
  isSettingsOpen: boolean
  isNotificationsOpen: boolean
  onClose: (panel: string) => void
  user?: {
    name?: string | null
    email?: string | null
    image?: string | null
    role?: string
  }
  notifications?: number
}

export function RightPanels({ 
  isForecastOpen, 
  isCalculatorOpen, 
  isSettingsOpen, 
  isNotificationsOpen, 
  onClose,
  user,
  notifications = 0
}: RightPanelsProps) {
  const { isDarkMode, toggleDarkMode } = useTheme()
  const { notifications: userNotifications, unreadCount, markAsRead, markAllAsRead } = useNotifications()
  const { data: session } = useSession()
  
  // Use session user or fallback to user prop
  const currentUser = session?.user || user
  const isLoggedIn = !!currentUser
  const [showPassword, setShowPassword] = useState(false)
  const [calculatorForm, setCalculatorForm] = useState({
    accountBalance: 10000,
    accountCurrency: 'USD',
    riskPercentage: 2,
    currencyPair: 'EURUSD',
    entryPrice: 1.0850,
    stopLossPrice: 1.0800,
    takeProfitPrice: 1.0950,
    leverage: 100,
    profitRatio: '1:2',
    stopLossMethod: 'price'
  })

  // Get icon for notification type
  const getNotificationIcon = (type: string) => {
    switch (type) {
      case 'LOGIN':
        return CheckCircle
      case 'WELCOME':
        return Info
      case 'SYSTEM':
        return AlertCircle
      case 'UPDATE':
        return CheckCircle
      case 'SECURITY':
        return Shield
      case 'PROMOTION':
        return Gift
      default:
        return Bell
    }
  }

  // Format time ago
  const formatTimeAgo = (dateString: string) => {
    const date = new Date(dateString)
    const now = new Date()
    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000)
    
    if (diffInSeconds < 60) return 'Just now'
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`
    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`
    if (diffInSeconds < 604800) return `${Math.floor(diffInSeconds / 86400)}d ago`
    return date.toLocaleDateString()
  }

  // Function to mark all notifications as read
  const handleMarkAllAsRead = () => {
    markAllAsRead()
  }

  // Function to mark individual notification as read
  const handleMarkAsRead = (notificationId: string) => {
    markAsRead([notificationId])
  }

  // Get recent notifications (last 5)
  const recentNotifications = userNotifications.slice(0, 5)

  const [forecasts, setForecasts] = useState<any[]>([])
  const [premiumForecasts, setPremiumForecasts] = useState<any[]>([])
  const [isLoadingForecasts, setIsLoadingForecasts] = useState(false)
  const [isLoadingMore, setIsLoadingMore] = useState(false)
  const [forecastTab, setForecastTab] = useState<'public' | 'premium'>('public')
  const [hasSubscription, setHasSubscription] = useState(false)
  const [publicPage, setPublicPage] = useState(1)
  const [premiumPage, setPremiumPage] = useState(1)
  const [hasMorePublic, setHasMorePublic] = useState(true)
  const [hasMorePremium, setHasMorePremium] = useState(true)
  const [commentModalOpen, setCommentModalOpen] = useState(false)
  const [selectedForecast, setSelectedForecast] = useState<any>(null)
  const [newComment, setNewComment] = useState('')
  const [forecastComments, setForecastComments] = useState<any[]>([])
  const [isSubmittingComment, setIsSubmittingComment] = useState(false)
  const [viewedForecasts, setViewedForecasts] = useState<Set<string>>(new Set())

  const fetchForecasts = async (reset = false) => {
    try {
      if (reset) {
        setIsLoadingForecasts(true)
        setPublicPage(1)
        setPremiumPage(1)
        setForecasts([])
        setPremiumForecasts([])
      }

      // Fetch public forecasts
      const publicResponse = await fetch(`/api/forecasts?type=public&limit=5&page=${reset ? 1 : publicPage}`, {
        credentials: 'include'
      })
      if (publicResponse.ok) {
        const publicData = await publicResponse.json()
        const processedForecasts = (publicData.forecasts || []).map((forecast: any) => ({
          ...forecast,
          isLiked: forecast.userLikes && forecast.userLikes.length > 0
        }))
        if (reset) {
          setForecasts(processedForecasts)
        } else {
          setForecasts(prev => [...prev, ...processedForecasts])
        }
        setHasMorePublic((publicData.forecasts || []).length === 5)
      } 

      // Fetch premium forecasts
      const premiumResponse = await fetch(`/api/forecasts?type=premium&limit=5&page=${reset ? 1 : premiumPage}`, {
        credentials: 'include'
      })
      if (premiumResponse.ok) {
        const premiumData = await premiumResponse.json()
        if (!premiumData.requiresSubscription) {
          const processedPremiumForecasts = (premiumData.forecasts || []).map((forecast: any) => ({
            ...forecast,
            isLiked: forecast.userLikes && forecast.userLikes.length > 0
          }))
          if (reset) {
            setPremiumForecasts(processedPremiumForecasts)
          } else {
            setPremiumForecasts(prev => [...prev, ...processedPremiumForecasts])
          }
          setHasSubscription(true)
          setHasMorePremium((premiumData.forecasts || []).length === 5)
        } else {
          setHasSubscription(false)
        }
      }
    } catch (error) {
      console.error('Failed to fetch forecasts:', error)
    } finally {
      setIsLoadingForecasts(false)
    }
  }

  const loadMoreForecasts = async () => {
    if (isLoadingMore) return

    try {
      setIsLoadingMore(true)
      
      if (forecastTab === 'public') {
        const nextPage = publicPage + 1
        setPublicPage(nextPage)
        const response = await fetch(`/api/forecasts?type=public&limit=5&page=${nextPage}`, {
          credentials: 'include'
        })
        if (response.ok) {
          const data = await response.json()
          const processedForecasts = (data.forecasts || []).map((forecast: any) => ({
            ...forecast,
            isLiked: forecast.userLikes && forecast.userLikes.length > 0
          }))
          setForecasts(prev => [...prev, ...processedForecasts])
          setHasMorePublic((data.forecasts || []).length === 5)
        }
      } else if (forecastTab === 'premium' && hasSubscription) {
        const nextPage = premiumPage + 1
        setPremiumPage(nextPage)
        const response = await fetch(`/api/forecasts?type=premium&limit=5&page=${nextPage}`, {
          credentials: 'include'
        })
        if (response.ok) {
          const data = await response.json()
          const processedForecasts = (data.forecasts || []).map((forecast: any) => ({
            ...forecast,
            isLiked: forecast.userLikes && forecast.userLikes.length > 0
          }))
          setPremiumForecasts(prev => [...prev, ...processedForecasts])
          setHasMorePremium((data.forecasts || []).length === 5)
        }
      }
    } catch (error) {
      console.error('Failed to load more forecasts:', error)
    } finally {
      setIsLoadingMore(false)
    }
  }



  const handleLike = async (forecastId: string) => {
    console.log('Session data:', session) // Debug log
    console.log('User prop:', user) // Debug log
    console.log('Current user:', currentUser) // Debug log
    console.log('Is logged in:', isLoggedIn) // Debug log
    
    if (!isLoggedIn) {
      alert('Please log in to like forecasts.')
      return
    }

    // Store original state for potential revert
    let originalForecasts: any[] = []
    let originalPremiumForecasts: any[] = []
    
    if (forecastTab === 'public') {
      originalForecasts = [...forecasts]
    } else {
      originalPremiumForecasts = [...premiumForecasts]
    }

    // Optimistic UI update
    const updateForecast = (forecast: any) => {
      if (forecast.id === forecastId) {
        return {
          ...forecast,
          isLiked: !forecast.isLiked,
          likes: forecast.isLiked ? forecast.likes - 1 : forecast.likes + 1
        }
      }
      return forecast
    }

    // Apply optimistic update
    if (forecastTab === 'public') {
      setForecasts(prev => prev.map(updateForecast))
    } else {
      setPremiumForecasts(prev => prev.map(updateForecast))
    }

    try {
      // Find the forecast to determine its type
      const findForecast = (list: any[]) => list.find(f => f.id === forecastId)
      const forecast = findForecast(forecastTab === 'public' ? forecasts : premiumForecasts)
      
      // Determine API endpoint based on forecast type
      const apiEndpoint = forecast?.type === 'signal' 
        ? `/api/signals/${forecastId}/like`
        : `/api/forecasts/${forecastId}/like`
      
      console.log('Making like API call to:', apiEndpoint)
      const response = await fetch(apiEndpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include'
      })
      
      console.log('Like API response status:', response.status)
      const responseData = await response.json()
      console.log('Like API response data:', responseData)
      
      if (!response.ok) {
        // Revert optimistic update on error
        console.error('Like API error:', responseData)
        if (forecastTab === 'public') {
          setForecasts(originalForecasts)
        } else {
          setPremiumForecasts(originalPremiumForecasts)
        }
        alert(`Failed to toggle like: ${responseData.error || 'Unknown error'}`)
        return
      }
      
      console.log('Like successful:', responseData)
    } catch (error) {
      console.error('Failed to toggle like:', error)
      // Revert optimistic update on network error
      if (forecastTab === 'public') {
        setForecasts(originalForecasts)
      } else {
        setPremiumForecasts(originalPremiumForecasts)
      }
      alert('Network error. Failed to toggle like.')
    }
  }

  const handleCommentClick = async (forecast: any) => {
    console.log('Session data for comments:', session) // Debug log
    console.log('User prop for comments:', user) // Debug log
    console.log('Current user for comments:', currentUser) // Debug log
    console.log('Is logged in for comments:', isLoggedIn) // Debug log
    
    if (!isLoggedIn) {
      alert('Please log in to view comments.')
      return
    }

    setSelectedForecast(forecast)
    setCommentModalOpen(true)
    
    // Fetch comments for this forecast/signal
    try {
      const apiEndpoint = forecast.type === 'signal' 
        ? `/api/signals/${forecast.id}/comments`
        : `/api/forecasts/${forecast.id}/comments`
      
      const response = await fetch(apiEndpoint, {
        credentials: 'include'
      })
      if (response.ok) {
        const data = await response.json()
        // Reverse comments so newest appear at bottom
        setForecastComments((data.comments || []).reverse())
      }
    } catch (error) {
      console.error('Failed to fetch comments:', error)
    }
  }

  const handleSubmitComment = async () => {
    if (!newComment.trim() || !selectedForecast || !isLoggedIn) return

    console.log('Submitting comment:', newComment.trim())
    console.log('Selected forecast:', selectedForecast.id)
    console.log('Current user:', currentUser)
    console.log('Is admin:', (currentUser as any).role === 'SUPERADMIN' || (currentUser as any).role === 'ADMIN')

    setIsSubmittingComment(true)
    try {
      const apiEndpoint = selectedForecast.type === 'signal' 
        ? `/api/signals/${selectedForecast.id}/comments`
        : `/api/forecasts/${selectedForecast.id}/comments`
      
      const response = await fetch(apiEndpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({
          content: newComment.trim()
        })
      })

      console.log('Comment API response status:', response.status)
      const responseData = await response.json()
      console.log('Comment API response data:', responseData)

      if (response.ok) {
        setForecastComments(prev => [...prev, responseData.comment])
        setNewComment('')
        
        // Update forecast comment count
        const updateForecast = (forecast: any) => {
          if (forecast.id === selectedForecast.id) {
            return {
              ...forecast,
              comments: forecast.comments + 1
            }
          }
          return forecast
        }

        if (forecastTab === 'public') {
          setForecasts(prev => prev.map(updateForecast))
        } else {
          setPremiumForecasts(prev => prev.map(updateForecast))
        }
        
        console.log('Comment submitted successfully')
      } else {
        console.error('Comment API error:', responseData)
        alert(`Failed to submit comment: ${responseData.error || 'Unknown error'}`)
      }
    } catch (error) {
      console.error('Failed to submit comment:', error)
      alert('Network error. Failed to submit comment.')
    } finally {
      setIsSubmittingComment(false)
    }
  }

  // Function to track forecast views
  const trackForecastView = async (forecastId: string) => {
    try {
      console.log('Attempting to track view for forecast:', forecastId)
      console.log('Current user:', currentUser)
      console.log('Is logged in:', isLoggedIn)
      
      // Add a small delay to prevent rapid fire calls
      await new Promise(resolve => setTimeout(resolve, 100))
      
      const response = await fetch(`/api/forecasts/${forecastId}/view`, {
        method: 'POST',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
        },
      })

      console.log('View tracking response status:', response.status)
      
      if (response.ok) {
        const data = await response.json()
        console.log('View tracked for forecast:', forecastId, 'Views:', data.views)
        
        // Update the forecast views in the state
        setForecasts(prevForecasts => 
          prevForecasts.map(forecast => 
            forecast.id === forecastId 
              ? { ...forecast, views: data.views }
              : forecast
          )
        )
        
        setPremiumForecasts(prevForecasts => 
          prevForecasts.map(forecast => 
            forecast.id === forecastId 
              ? { ...forecast, views: data.views }
              : forecast
          )
        )
      } else {
        const errorData = await response.json()
        console.error('Failed to track view for forecast:', forecastId, 'Error:', errorData)
      }
    } catch (error) {
      console.error('Error tracking forecast view:', error)
    }
  }

  useEffect(() => {
    if (isForecastOpen) {
      fetchForecasts(true)
    }
  }, [isForecastOpen])

  useEffect(() => {
    if (isForecastOpen) {
      fetchForecasts(true)
    }
  }, [forecastTab])

  // Track views when forecasts are displayed (only once per forecast per session)
  useEffect(() => {
    if (isForecastOpen && (forecasts.length > 0 || premiumForecasts.length > 0)) {
      console.log('Tracking views for forecasts:', forecasts.length + premiumForecasts.length)
      console.log('Is logged in:', isLoggedIn)
      console.log('Current user:', currentUser)
      const allForecasts = [...forecasts, ...premiumForecasts]
      allForecasts.forEach(forecast => {
        // Only track if we haven't already viewed this forecast in this session
        if (!viewedForecasts.has(forecast.id)) {
          console.log('Tracking view for forecast:', forecast.id, forecast.title)
          trackForecastView(forecast.id)
          setViewedForecasts(prev => new Set(prev).add(forecast.id))
        } else {
          console.log('Already viewed forecast in this session:', forecast.id, forecast.title)
        }
      })
    }
  }, [isForecastOpen, forecasts, premiumForecasts, viewedForecasts])

  // Mark forecast notification as viewed when panel is opened
  useEffect(() => {
    if (isForecastOpen) {
      // This would be handled by the NEW notifications system if needed
      // markAsViewed('/forecast')
    }
  }, [isForecastOpen])

  // Listen for custom event to open premium forecasts tab
  useEffect(() => {
    const handleOpenPremiumForecasts = () => {
      if (isForecastOpen) {
        setForecastTab('premium')
      }
    }

    window.addEventListener('openPremiumForecasts', handleOpenPremiumForecasts)
    return () => {
      window.removeEventListener('openPremiumForecasts', handleOpenPremiumForecasts)
    }
  }, [isForecastOpen])

  const calculateLotSize = () => {
    const { accountBalance, riskPercentage, entryPrice, stopLossPrice, takeProfitPrice, currencyPair, accountCurrency, leverage } = calculatorForm
    
    if (!entryPrice || !stopLossPrice || entryPrice <= 0 || stopLossPrice <= 0) {
      return {
        lotSize: 0,
        riskAmount: 0,
        pipValue: 0,
        stopLossPips: 0,
        positionValue: 0,
        marginRequired: 0,
        marginLevel: 0,
        maxLoss: 0,
        takeProfitPips: 0,
        riskRewardRatio: 0,
        maxProfit: 0
      }
    }
    
    return calculateLotSizeUtil(
      accountBalance, 
      riskPercentage, 
      entryPrice, 
      stopLossPrice, 
      currencyPair, 
      accountCurrency, 
      leverage,
      takeProfitPrice
    )
  }

  return (
    <>
      {/* Forecast Panel */}
      {isForecastOpen && (
        <div className="fixed inset-0 z-50 bg-black bg-opacity-50">
          <div className={`fixed right-0 top-0 h-full w-[500px] shadow-xl transform transition-all duration-300 ease-in-out ${isDarkMode ? 'bg-gray-900' : 'bg-white'}`}>
            <div className={`flex items-center justify-between p-4 border-b transition-colors duration-200 ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>
              <div className="flex items-center space-x-2">
                <TrendingUp className={`h-5 w-5 transition-colors duration-200 ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`} />
                <h2 className={`text-lg font-semibold transition-colors duration-200 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>Market Forecasts</h2>
              </div>
              <Button variant="ghost" size="sm" onClick={() => onClose('forecast')}>
                <X className="h-4 w-4" />
              </Button>
            </div>
            
            <div className="p-4 space-y-4">
              
                <div className="flex items-center space-x-2">
                <Button 
                  variant={forecastTab === 'public' ? 'default' : 'ghost'}
                  size="sm"
                  onClick={() => setForecastTab('public')}
                  className={forecastTab === 'public' ? 'bg-blue-600 text-white' : ''}
                >
                  Public Forecasts
                </Button>
                <Button 
                  variant={forecastTab === 'premium' ? 'default' : 'ghost'}
                  size="sm"
                  onClick={() => setForecastTab('premium')}
                  className={forecastTab === 'premium' ? 'bg-purple-600 text-white' : ''}
                >
                  Premium Forecasts {!hasSubscription && <Lock className="h-3 w-3 ml-1" />}
                </Button>
              </div>

              <div className="h-[calc(100vh-200px)] overflow-y-auto space-y-4 pr-2">
                {isLoadingForecasts ? (
                  <div className="flex items-center justify-center py-4">
                    <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500"></div>
                  </div>
                ) : forecastTab === 'public' ? (
                  forecasts.length === 0 ? (
                    <div className="text-center py-4">
                      <TrendingUp className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                      <p className={`text-sm transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                        No public forecasts available
                      </p>
                    </div>
                  ) : (
                    <>
                      {forecasts.map((forecast) => (
                  <Card key={forecast.id} className={`hover:shadow-md transition-all duration-200 ${isDarkMode ? 'bg-gray-800 border-gray-700 hover:bg-gray-750' : 'bg-white border-gray-200 hover:bg-gray-50'}`}>
                    <CardContent className="p-4">
                            {(forecast.chartImage || forecast.imageUrl) && (
                        <div className="mb-3">
                          <img 
                                  src={forecast.chartImage || forecast.imageUrl} 
                            alt={forecast.title}
                            className="w-full h-32 object-cover rounded-lg"
                          />
                        </div>
                      )}
                            <div className="space-y-2">
                              <div className="flex items-start justify-between">
                                <h3 className={`font-semibold text-lg transition-colors duration-200 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>{forecast.title}</h3>
                                {forecast.type === 'signal' && (
                                  <div className="flex items-center space-x-2 ml-4">
                                    <Badge className={forecast.action === 'BUY' ? 'bg-green-500 hover:bg-green-600' : 'bg-red-500 hover:bg-red-600'}>
                                      {forecast.action}
                                    </Badge>
                                    {forecast.status === 'ACTIVE' && (
                                      <Badge className="bg-blue-500 hover:bg-blue-600">Active</Badge>
                                    )}
                                  </div>
                                )}
                              </div>
                              <p className={`transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>{forecast.description}</p>
                              {forecast.pair && (
                                <p className={`text-xs transition-colors duration-200 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>Pair: {forecast.pair}</p>
                              )}
                              
                              {/* Signal-specific trading parameters */}
                              {forecast.type === 'signal' && (
                                <div className="grid grid-cols-2 gap-2 pt-2 border-t border-gray-200 dark:border-gray-700">
                                  <div>
                                    <p className={`text-xs font-medium transition-colors duration-200 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                                      Entry Price
                                    </p>
                                    <p className={`font-semibold text-sm transition-colors duration-200 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                                      {forecast.entryPrice || 'N/A'}
                                    </p>
                                  </div>
                                  <div>
                                    <p className={`text-xs font-medium transition-colors duration-200 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                                      Stop Loss
                                    </p>
                                    <p className={`font-semibold text-sm text-red-600 dark:text-red-400`}>
                                      {forecast.stopLoss || 'N/A'}
                                    </p>
                                  </div>
                                  <div>
                                    <p className={`text-xs font-medium transition-colors duration-200 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                                      Take Profit
                                    </p>
                                    <p className={`font-semibold text-sm text-green-600 dark:text-green-400`}>
                                      {forecast.takeProfit || 'N/A'}
                                    </p>
                                  </div>
                                  <div>
                                    <p className={`text-xs font-medium transition-colors duration-200 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                                      Type
                                    </p>
                                    <p className={`font-semibold text-sm transition-colors duration-200 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                                      Signal
                                    </p>
                                  </div>
                                </div>
                              )}
                              
                        <div className={`flex items-center justify-between text-sm transition-colors duration-200 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                                <span>By {"CoreFX Team"} • {new Date(forecast.createdAt).toLocaleDateString()}</span>
                          <div className="flex items-center space-x-3">
                                  <button 
                                    onClick={() => handleLike(forecast.id)}
                                    className={`flex items-center space-x-1 hover:text-red-500 transition-colors ${
                                      forecast.isLiked ? 'text-red-500' : 'text-gray-500'
                                    }`}
                                  >
                                    <Heart className={`h-4 w-4 ${forecast.isLiked ? 'fill-current' : ''}`} />
                                    <span>{forecast.likes || 0}</span>
                                  </button>
                                  <button 
                                    onClick={() => handleCommentClick(forecast)}
                                    className="flex items-center space-x-1 hover:text-blue-500 transition-colors text-gray-500"
                                  >
                                    <MessageCircle className="h-4 w-4" />
                                    <span>{forecast.comments || 0}</span>
                                  </button>
                          </div>
                        </div>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                      {hasMorePublic && (
                        <div className="flex justify-center py-4">
                          <Button 
                            onClick={loadMoreForecasts}
                            disabled={isLoadingMore}
                            variant="outline"
                            size="sm"
                          >
                            {isLoadingMore ? (
                              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500 mr-2"></div>
                            ) : null}
                            Load More
                          </Button>
                        </div>
                      )}
                    </>
                  )
                ) : forecastTab === 'premium' ? (
                  !hasSubscription ? (
                    <div className="text-center py-4">
                      <Crown className="h-8 w-8 text-yellow-500 mx-auto mb-2" />
                      <p className={`text-sm font-medium transition-colors duration-200 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                        Premium Content
                      </p>
                      <p className={`text-xs transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                        Subscribe to access premium forecasts
                      </p>
                    </div>
                  ) : premiumForecasts.length === 0 ? (
                    <div className="text-center py-4">
                      <TrendingUp className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                      <p className={`text-sm transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                        No premium forecasts available
                      </p>
                    </div>
                  ) : (
                    <>
                      {premiumForecasts.map((forecast) => (
                        <Card key={forecast.id} className={`hover:shadow-md transition-all duration-200 ${isDarkMode ? 'bg-gray-800 border-gray-700 hover:bg-gray-750' : 'bg-white border-gray-200 hover:bg-gray-50'}`}>
                          <CardContent className="p-4">
                            {(forecast.chartImage || forecast.imageUrl) && (
                              <div className="mb-3">
                                <img 
                                  src={forecast.chartImage || forecast.imageUrl} 
                                  alt={forecast.title}
                                  className="w-full h-32 object-cover rounded-lg"
                                />
                        </div>
                      )}
                      <div className="space-y-2">
                              <div className="flex items-start justify-between">
                        <h3 className={`font-semibold text-lg transition-colors duration-200 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>{forecast.title}</h3>
                                <div className="flex items-center space-x-2 ml-4">
                                  <Badge className="bg-purple-100 text-purple-800 text-xs">
                                    <Crown className="h-3 w-3 mr-1" />
                                    Premium
                                  </Badge>
                                  {forecast.type === 'signal' && (
                                    <>
                                      <Badge className={forecast.action === 'BUY' ? 'bg-green-500 hover:bg-green-600' : 'bg-red-500 hover:bg-red-600'}>
                                        {forecast.action}
                                      </Badge>
                                      {forecast.status === 'ACTIVE' && (
                                        <Badge className="bg-blue-500 hover:bg-blue-600">Active</Badge>
                                      )}
                                    </>
                                  )}
                                </div>
                              </div>
                        <p className={`transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>{forecast.description}</p>
                              {forecast.pair && (
                                <p className={`text-xs transition-colors duration-200 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>Pair: {forecast.pair}</p>
                              )}
                              
                              {/* Signal-specific trading parameters */}
                              {forecast.type === 'signal' && (
                                <div className="grid grid-cols-2 gap-2 pt-2 border-t border-gray-200 dark:border-gray-700">
                                  <div>
                                    <p className={`text-xs font-medium transition-colors duration-200 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                                      Entry Price
                                    </p>
                                    <p className={`font-semibold text-sm transition-colors duration-200 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                                      {forecast.entryPrice || 'N/A'}
                                    </p>
                                  </div>
                                  <div>
                                    <p className={`text-xs font-medium transition-colors duration-200 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                                      Stop Loss
                                    </p>
                                    <p className={`font-semibold text-sm text-red-600 dark:text-red-400`}>
                                      {forecast.stopLoss || 'N/A'}
                                    </p>
                                  </div>
                                  <div>
                                    <p className={`text-xs font-medium transition-colors duration-200 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                                      Take Profit
                                    </p>
                                    <p className={`font-semibold text-sm text-green-600 dark:text-green-400`}>
                                      {forecast.takeProfit || 'N/A'}
                                    </p>
                                  </div>
                                  <div>
                                    <p className={`text-xs font-medium transition-colors duration-200 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                                      Type
                                    </p>
                                    <p className={`font-semibold text-sm transition-colors duration-200 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                                      Signal
                                    </p>
                                  </div>
                                </div>
                              )}
                              
                        <div className={`flex items-center justify-between text-sm transition-colors duration-200 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                                <span>By {"CoreFX Team"} • {new Date(forecast.createdAt).toLocaleDateString()}</span>
                          <div className="flex items-center space-x-3">
                                  <button 
                                    onClick={() => handleLike(forecast.id)}
                                    className={`flex items-center space-x-1 hover:text-red-500 transition-colors ${
                                      forecast.isLiked ? 'text-red-500' : 'text-gray-500'
                                    }`}
                                  >
                                    <Heart className={`h-4 w-4 ${forecast.isLiked ? 'fill-current' : ''}`} />
                                    <span>{forecast.likes || 0}</span>
                                  </button>
                                  <button 
                                    onClick={() => handleCommentClick(forecast)}
                                    className="flex items-center space-x-1 hover:text-blue-500 transition-colors text-gray-500"
                                  >
                                    <MessageCircle className="h-4 w-4" />
                                    <span>{forecast.comments || 0}</span>
                                  </button>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
                      {hasMorePremium && (
                        <div className="flex justify-center py-4">
                          <Button 
                            onClick={loadMoreForecasts}
                            disabled={isLoadingMore}
                            variant="outline"
                            size="sm"
                          >
                            {isLoadingMore ? (
                              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500 mr-2"></div>
                            ) : null}
                            Load More
                          </Button>
                        </div>
                      )}
                    </>
                  )
                ) : null}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Lot Size Calculator Panel */}
      {isCalculatorOpen && (
        <div className="fixed inset-0 z-50 bg-black bg-opacity-50">
          <div className={`fixed right-0 top-0 h-full w-96 shadow-xl transform transition-all duration-300 ease-in-out flex flex-col ${isDarkMode ? 'bg-gray-900' : 'bg-white'}`}>
            <div className={`flex items-center justify-between p-4 border-b transition-colors duration-200 ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>
              <div className="flex items-center space-x-2">
                <Calculator className={`h-5 w-5 transition-colors duration-200 ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`} />
                <h2 className={`text-lg font-semibold transition-colors duration-200 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>Lot Size Calculator</h2>
              </div>
              <Button variant="ghost" size="sm" onClick={() => onClose('calculator')}>
                <X className="h-4 w-4" />
              </Button>
            </div>
            
            <div className="flex-1 overflow-y-auto">
              <div className="p-4 space-y-6 pb-20">
              <div className="text-center">
                <h3 className={`text-lg font-semibold transition-colors duration-200 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>Lot Size Calculator</h3>
                <p className={`text-sm mt-1 transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>Calculate optimal position size based on risk management</p>
              </div>
              
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className={`text-sm font-medium transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>Account Balance</label>
                    <Input 
                      type="number"
                      value={calculatorForm.accountBalance}
                      onChange={(e) => setCalculatorForm({...calculatorForm, accountBalance: Number(e.target.value)})}
                      className={`mt-1 transition-colors duration-200 ${isDarkMode ? 'bg-gray-800 border-gray-600 text-white placeholder-gray-400' : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'}`}
                      placeholder="10000"
                    />
                  </div>
                  
                  <div>
                    <label className={`text-sm font-medium transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>Account Currency</label>
                    <select 
                      value={calculatorForm.accountCurrency}
                      onChange={(e) => setCalculatorForm({...calculatorForm, accountCurrency: e.target.value})}
                      className={`mt-1 w-full p-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200 ${isDarkMode ? 'bg-gray-800 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-900'}`}
                    >
                      <option value="USD">USD</option>
                      <option value="EUR">EUR</option>
                      <option value="GBP">GBP</option>
                      <option value="JPY">JPY</option>
                      <option value="AUD">AUD</option>
                      <option value="CAD">CAD</option>
                      <option value="CHF">CHF</option>
                      <option value="NZD">NZD</option>
                    </select>
                  </div>
                </div>
                
                <div>
                  <label className={`text-sm font-medium transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>Risk Percentage (%)</label>
                  <Input 
                    type="number"
                    value={calculatorForm.riskPercentage}
                    onChange={(e) => setCalculatorForm({...calculatorForm, riskPercentage: Number(e.target.value)})}
                    className={`mt-1 transition-colors duration-200 ${isDarkMode ? 'bg-gray-800 border-gray-600 text-white placeholder-gray-400' : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'}`}
                    placeholder="2"
                    min="0.1"
                    max="10"
                    step="0.1"
                  />
                  <p className={`text-xs mt-1 transition-colors duration-200 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>Recommended: 1-2% per trade</p>
                </div>
                
                <div>
                  <label className={`text-sm font-medium transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>Currency Pair</label>
                  <select 
                    value={calculatorForm.currencyPair}
                    onChange={(e) => setCalculatorForm({...calculatorForm, currencyPair: e.target.value})}
                    className={`mt-1 w-full p-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200 ${isDarkMode ? 'bg-gray-800 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-900'}`}
                  >
                    <optgroup label="Major Pairs">
                      <option value="EURUSD">EUR/USD</option>
                      <option value="GBPUSD">GBP/USD</option>
                      <option value="AUDUSD">AUD/USD</option>
                      <option value="NZDUSD">NZD/USD</option>
                      <option value="USDCAD">USD/CAD</option>
                      <option value="USDCHF">USD/CHF</option>
                    </optgroup>
                    <optgroup label="JPY Pairs">
                      <option value="USDJPY">USD/JPY</option>
                      <option value="EURJPY">EUR/JPY</option>
                      <option value="GBPJPY">GBP/JPY</option>
                      <option value="AUDJPY">AUD/JPY</option>
                    </optgroup>
                    <optgroup label="Cross Pairs">
                      <option value="EURGBP">EUR/GBP</option>
                      <option value="EURAUD">EUR/AUD</option>
                      <option value="GBPAUD">GBP/AUD</option>
                      <option value="AUDNZD">AUD/NZD</option>
                    </optgroup>
                  </select>
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className={`text-sm font-medium transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>Entry Price</label>
                    <Input 
                      type="number"
                      value={calculatorForm.entryPrice}
                      onChange={(e) => setCalculatorForm({...calculatorForm, entryPrice: Number(e.target.value)})}
                      className={`mt-1 transition-colors duration-200 ${isDarkMode ? 'bg-gray-800 border-gray-600 text-white placeholder-gray-400' : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'}`}
                      placeholder="1.0850"
                      step="0.0001"
                    />
                  </div>
                  
                  <div>
                    <label className={`text-sm font-medium transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>Stop Loss Price</label>
                    <Input 
                      type="number"
                      value={calculatorForm.stopLossPrice}
                      onChange={(e) => setCalculatorForm({...calculatorForm, stopLossPrice: Number(e.target.value)})}
                      className={`mt-1 transition-colors duration-200 ${isDarkMode ? 'bg-gray-800 border-gray-600 text-white placeholder-gray-400' : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'}`}
                      placeholder="1.0800"
                      step="0.0001"
                    />
                  </div>
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className={`text-sm font-medium transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>Take Profit Price</label>
                    <Input 
                      type="number"
                      value={calculatorForm.takeProfitPrice}
                      onChange={(e) => setCalculatorForm({...calculatorForm, takeProfitPrice: Number(e.target.value)})}
                      className={`mt-1 transition-colors duration-200 ${isDarkMode ? 'bg-gray-800 border-gray-600 text-white placeholder-gray-400' : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'}`}
                      placeholder="1.0950"
                      step="0.0001"
                    />
                  </div>
                  
                  <div>
                    <label className={`text-sm font-medium transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>Leverage</label>
                    <select 
                      value={calculatorForm.leverage}
                      onChange={(e) => setCalculatorForm({...calculatorForm, leverage: Number(e.target.value)})}
                      className={`mt-1 w-full p-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200 ${isDarkMode ? 'bg-gray-800 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-900'}`}
                    >
                      <option value="50">1:50</option>
                      <option value="100">1:100</option>
                      <option value="200">1:200</option>
                      <option value="300">1:300</option>
                      <option value="400">1:400</option>
                      <option value="500">1:500</option>
                    </select>
                  </div>
                </div>
                
                <div>
                  <label className={`text-sm font-medium transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>Profit Ratio</label>
                  <select 
                    value={calculatorForm.profitRatio}
                    onChange={(e) => setCalculatorForm({...calculatorForm, profitRatio: e.target.value})}
                    className={`mt-1 w-full p-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200 ${isDarkMode ? 'bg-gray-800 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-900'}`}
                  >
                    <option value="1:1">1:1 (Conservative)</option>
                    <option value="1:2">1:2 (Balanced)</option>
                    <option value="1:3">1:3 (Aggressive)</option>
                    <option value="1:4">1:4 (Very Aggressive)</option>
                  </select>
                </div>
              </div>
              
              {/* Validation Warnings */}
              {(() => {
                const calc = calculateLotSize()
                const warnings = []
                
                if (calc.marginLevel < 200) {
                  warnings.push({
                    type: 'warning',
                    message: 'Low margin level - consider reducing position size',
                    icon: '⚠️'
                  })
                }
                
                if (calc.riskPercentage > 5) {
                  warnings.push({
                    type: 'danger',
                    message: 'High risk percentage - maximum recommended is 5%',
                    icon: '🚨'
                  })
                }
                
                if (calc.lotSize > 10) {
                  warnings.push({
                    type: 'warning',
                    message: 'Large position size - ensure you have sufficient margin',
                    icon: '⚠️'
                  })
                }
                
                if (calc.riskRewardRatio && calc.riskRewardRatio < 1) {
                  warnings.push({
                    type: 'info',
                    message: 'Risk:Reward ratio below 1:1 - consider adjusting take profit',
                    icon: 'ℹ️'
                  })
                }
                
                return warnings.length > 0 ? (
                  <div className="space-y-2">
                    {warnings.map((warning, index) => (
                      <div key={index} className={`p-3 rounded-md border-l-4 ${
                        warning.type === 'danger' 
                          ? 'bg-red-50 border-red-400 text-red-700 dark:bg-red-900/20 dark:border-red-500 dark:text-red-300'
                          : warning.type === 'warning'
                          ? 'bg-yellow-50 border-yellow-400 text-yellow-700 dark:bg-yellow-900/20 dark:border-yellow-500 dark:text-yellow-300'
                          : 'bg-blue-50 border-blue-400 text-blue-700 dark:bg-blue-900/20 dark:border-blue-500 dark:text-blue-300'
                      }`}>
                        <div className="flex items-center">
                          <span className="text-lg mr-2">{warning.icon}</span>
                          <span className="text-sm font-medium">{warning.message}</span>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : null
              })()}

              <div className="space-y-3">
                <Card className={`transition-colors duration-200 ${isDarkMode ? 'bg-gradient-to-r from-blue-900/20 to-indigo-900/20 border-blue-700' : 'bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200'}`}>
                  <CardContent className="p-4">
                    <div className="text-center">
                      <h3 className={`text-lg font-semibold transition-colors duration-200 ${isDarkMode ? 'text-blue-300' : 'text-blue-900'}`}>Recommended Lot Size</h3>
                      <div className={`text-3xl font-bold mt-2 transition-colors duration-200 ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`}>
                        {calculateLotSize().lotSize}
                      </div>
                      <p className={`text-sm mt-1 transition-colors duration-200 ${isDarkMode ? 'text-blue-300' : 'text-blue-700'}`}>Standard lots</p>
                    </div>
                  </CardContent>
                </Card>
                
                <div className="grid grid-cols-2 gap-3">
                  <Card className={`transition-colors duration-200 ${isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'}`}>
                    <CardContent className="p-3">
                      <div className="text-center">
                        <p className={`text-xs transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>Risk Amount</p>
                        <p className={`text-lg font-semibold transition-colors duration-200 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                          {calculatorForm.accountCurrency} {calculateLotSize().riskAmount}
                        </p>
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card className={`transition-colors duration-200 ${isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'}`}>
                    <CardContent className="p-3">
                      <div className="text-center">
                        <p className={`text-xs transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>Stop Loss (Pips)</p>
                        <p className={`text-lg font-semibold transition-colors duration-200 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                          {calculateLotSize().stopLossPips}
                        </p>
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card className={`transition-colors duration-200 ${isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'}`}>
                    <CardContent className="p-3">
                      <div className="text-center">
                        <p className={`text-xs transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>Margin Required</p>
                        <p className={`text-lg font-semibold transition-colors duration-200 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                          {calculatorForm.accountCurrency} {calculateLotSize().marginRequired}
                        </p>
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card className={`transition-colors duration-200 ${isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'}`}>
                    <CardContent className="p-3">
                      <div className="text-center">
                        <p className={`text-xs transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>Margin Level</p>
                        <p className={`text-lg font-semibold transition-colors duration-200 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                          {calculateLotSize().marginLevel}%
                        </p>
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card className={`transition-colors duration-200 ${isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'}`}>
                    <CardContent className="p-3">
                      <div className="text-center">
                        <p className={`text-xs transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>Max Loss</p>
                        <p className={`text-lg font-semibold transition-colors duration-200 ${isDarkMode ? 'text-red-400' : 'text-red-600'}`}>
                          {calculatorForm.accountCurrency} {calculateLotSize().maxLoss}
                        </p>
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card className={`transition-colors duration-200 ${isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'}`}>
                    <CardContent className="p-3">
                      <div className="text-center">
                        <p className={`text-xs transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>Max Profit</p>
                        <p className={`text-lg font-semibold transition-colors duration-200 ${isDarkMode ? 'text-green-400' : 'text-green-600'}`}>
                          {calculatorForm.accountCurrency} {calculateLotSize().maxProfit || 0}
                        </p>
                      </div>
                    </CardContent>
                  </Card>
                  
                  {calculateLotSize().riskRewardRatio && (
                    <Card className={`transition-colors duration-200 col-span-2 ${isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'}`}>
                      <CardContent className="p-3">
                        <div className="text-center">
                          <p className={`text-xs transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>Risk:Reward Ratio</p>
                          <p className={`text-lg font-semibold transition-colors duration-200 ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`}>
                            1:{calculateLotSize().riskRewardRatio}
                          </p>
                        </div>
                      </CardContent>
                    </Card>
                  )}
                </div>
                
                {/* Trading Costs Section */}
                <div className="mt-6">
                  <h4 className={`text-sm font-semibold mb-3 transition-colors duration-200 ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>
                    Trading Costs
                  </h4>
                  <div className="grid grid-cols-2 gap-3">
                    <Card className={`transition-colors duration-200 ${isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'}`}>
                      <CardContent className="p-3">
                        <div className="text-center">
                          <p className={`text-xs transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>Spread Cost</p>
                          <p className={`text-lg font-semibold transition-colors duration-200 ${isDarkMode ? 'text-orange-400' : 'text-orange-600'}`}>
                            {calculatorForm.accountCurrency} {(() => {
                              const calc = calculateLotSize()
                              const spreadCost = (getSpread(calculatorForm.currencyPair) * calc.pipValue * calc.lotSize) / 10
                              return spreadCost.toFixed(2)
                            })()}
                          </p>
                        </div>
                      </CardContent>
                    </Card>
                    
                    <Card className={`transition-colors duration-200 ${isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'}`}>
                      <CardContent className="p-3">
                        <div className="text-center">
                          <p className={`text-xs transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>Swap Cost (Daily)</p>
                          <p className={`text-lg font-semibold transition-colors duration-200 ${isDarkMode ? 'text-purple-400' : 'text-purple-600'}`}>
                            {calculatorForm.accountCurrency} {(() => {
                              const calc = calculateLotSize()
                              const swapCost = calculateSwapCost(calculatorForm.currencyPair, calc.lotSize, 1, calculatorForm.accountCurrency)
                              return swapCost.toFixed(2)
                            })()}
                          </p>
                        </div>
                      </CardContent>
                    </Card>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Settings Panel */}
      {isSettingsOpen && (
        <div className="fixed inset-0 z-50 bg-black bg-opacity-50">
          <div className="fixed right-0 top-0 h-full w-96 bg-white dark:bg-gray-900 shadow-xl transform transition-transform duration-300 ease-in-out">
            <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
              <div className="flex items-center space-x-2">
                <Settings className="h-5 w-5 text-blue-600 dark:text-blue-400" />
                <h2 className="text-lg font-semibold text-gray-900 dark:text-white">Settings</h2>
              </div>
              <Button variant="ghost" size="sm" onClick={() => onClose('settings')}>
                <X className="h-4 w-4" />
              </Button>
            </div>
            
            <div className="p-4 space-y-6">
              <div className="space-y-4">
                <h3 className="text-lg font-medium text-gray-900 dark:text-white">Appearance</h3>
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <div className="flex items-center space-x-2">
                      <div className={`h-4 w-4 rounded-full ${isDarkMode ? 'bg-blue-500' : 'bg-yellow-500'}`}></div>
                      <span className="text-sm font-medium text-gray-900 dark:text-white">Theme</span>
                    </div>
                    <p className="text-sm text-gray-500 dark:text-gray-400">Switch between light and dark mode</p>
                  </div>
                  <Switch
                    checked={isDarkMode}
                    onCheckedChange={toggleDarkMode}
                  />
                </div>
                <p className="flex items-center text-sm text-gray-500 dark:text-gray-400">
                  <BarChart3 className="mr-2 h-4 w-4" />
                  Currently using {isDarkMode ? 'Dark' : 'Light'} mode
                </p>
              </div>
              
              <div className="space-y-4">
                <h3 className="text-lg font-medium text-gray-900 dark:text-white">Profile</h3>
                <div className="space-y-3">
                  <div>
                    <label className="text-sm font-medium text-gray-700 dark:text-gray-300">Name</label>
                    <Input 
                      value={user?.name || ''}
                      className="mt-1 dark:bg-gray-800 dark:border-gray-600 dark:text-white"
                      disabled
                    />
                  </div>
                  <div>
                    <label className="text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
                    <Input 
                      value={user?.email || ''}
                      className="mt-1 dark:bg-gray-800 dark:border-gray-600 dark:text-white"
                      disabled
                    />
                  </div>
                </div>
              </div>
              
              <div className="space-y-4">
                <h3 className="text-lg font-medium text-gray-900 dark:text-white">Features</h3>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  Additional settings like profile picture uploads, notifications, and two-factor authentication are coming soon. Stay tuned for updates!
                </p>
              </div>
              
              <Button 
                className="w-full bg-gradient-to-r from-blue-500 to-teal-500 hover:from-blue-600 hover:to-teal-600 dark:from-blue-600 dark:to-teal-600"
                onClick={() => onClose('settings')}
              >
                Done
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Notifications Panel */}
      {isNotificationsOpen && (
        <div className="fixed inset-0 z-50 bg-black bg-opacity-50">
          <div className={`fixed right-0 top-0 h-full w-96 shadow-xl transform transition-all duration-300 ease-in-out ${isDarkMode ? 'bg-gray-900' : 'bg-white'}`}>
            <div className={`flex items-center justify-between p-4 border-b transition-colors duration-200 ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>
              <div className="flex items-center space-x-2">
                <Bell className={`h-5 w-5 transition-colors duration-200 ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`} />
                <h2 className={`text-lg font-semibold transition-colors duration-200 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>Notifications</h2>
                {unreadCount > 0 && (
                  <Badge variant="destructive" className="ml-2">
                    {unreadCount}
                  </Badge>
                )}
              </div>
              <Button variant="ghost" size="sm" onClick={() => onClose('notifications')}>
                <X className="h-4 w-4" />
              </Button>
            </div>
            
            <div className="p-4">
              <div className="flex items-center justify-between mb-4">
                <Button 
                  variant="ghost" 
                  size="sm" 
                  onClick={handleMarkAllAsRead}
                  disabled={unreadCount === 0}
                  className={`transition-colors duration-200 ${isDarkMode ? 'text-blue-400 hover:text-blue-300 disabled:text-gray-500' : 'text-blue-600 hover:text-blue-700 disabled:text-gray-400'}`}
                >
                  Mark all as read
                </Button>
              </div>
              
              <div className="space-y-3">
                {recentNotifications.length === 0 ? (
                  <div className="text-center py-8">
                    <Bell className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                    <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                      No notifications yet
                    </p>
                  </div>
                ) : (
                  recentNotifications.map((notification: any) => {
                    const Icon = getNotificationIcon(notification.type)
                    return (
                      <Card 
                        key={notification.id} 
                        className={`hover:shadow-md transition-all duration-200 cursor-pointer ${isDarkMode ? 'bg-gray-800 border-gray-700 hover:bg-gray-750' : 'bg-white border-gray-200 hover:bg-gray-50'} ${!notification.isRead ? 'border-l-4 border-l-blue-500' : ''}`}
                        onClick={() => handleMarkAsRead(notification.id)}
                      >
                        <CardContent className="p-4">
                          <div className="flex items-start space-x-3">
                            <div className="flex-shrink-0">
                              <Icon className={`h-5 w-5 ${
                                notification.type === 'LOGIN' ? 'text-green-500' :
                                notification.type === 'WELCOME' ? 'text-blue-500' :
                                notification.type === 'SYSTEM' ? 'text-orange-500' :
                                notification.type === 'UPDATE' ? 'text-purple-500' :
                                notification.type === 'SECURITY' ? 'text-red-500' :
                                notification.type === 'PROMOTION' ? 'text-pink-500' :
                                'text-gray-500'
                              }`} />
                            </div>
                            <div className="flex-1 min-w-0">
                              <h4 className={`text-sm font-medium transition-colors duration-200 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>{notification.title}</h4>
                              <p className={`text-sm mt-1 transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>{notification.message}</p>
                              <p className={`text-xs mt-2 transition-colors duration-200 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>{formatTimeAgo(notification.createdAt)}</p>
                            </div>
                            {!notification.isRead && (
                              <div className="flex-shrink-0">
                                <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                              </div>
                            )}
                          </div>
                        </CardContent>
                      </Card>
                    )
                  })
                )}
              </div>
              
              <div className="mt-6">
                <Button 
                  variant="outline" 
                  className={`w-full transition-colors duration-200 ${isDarkMode ? 'border-gray-600 text-white hover:bg-gray-700' : 'border-gray-300 text-gray-700 hover:bg-gray-50'}`}
                  onClick={() => {
                    onClose('notifications')
                    window.location.href = '/notifications'
                  }}
                >
                  View All Notifications
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Comment Modal */}
      {commentModalOpen && (
        <div className="fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center p-4">
          <div className={`w-full max-w-2xl max-h-[80vh] ${isDarkMode ? 'bg-gray-900' : 'bg-white'} rounded-lg shadow-xl overflow-hidden`}>
            <div className={`flex items-center justify-between p-4 border-b ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>
              <h3 className={`text-lg font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                Comments - {selectedForecast?.title}
              </h3>
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => {
                  setCommentModalOpen(false)
                  setSelectedForecast(null)
                  setForecastComments([])
                  setNewComment('')
                }}
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
            
            <div className="p-4 max-h-96 overflow-y-auto">
              {forecastComments.length === 0 ? (
                <p className={`text-center py-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                  No comments yet. Be the first to comment!
                </p>
              ) : (
                <div className="space-y-4">
                  {forecastComments.map((comment) => (
                    <div key={comment.id} className={`p-3 rounded-lg ${isDarkMode ? 'bg-gray-800' : 'bg-gray-50'}`}>
                      <div className="flex items-center space-x-2 mb-2">
                        <span className={`font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                          {comment.user.name}
                        </span>
                        {comment.isAdmin && (
                          <Badge className="bg-blue-100 text-blue-800 text-xs">
                            Admin
                          </Badge>
                        )}
                        <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                          {new Date(comment.createdAt).toLocaleDateString()}
                        </span>
                      </div>
                      <p className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                        {comment.content}
                      </p>
                    </div>
                  ))}
                </div>
              )}
            </div>
            
            <div className={`p-4 border-t ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>
              <div className="flex space-x-2">
                <Input
                  value={newComment}
                  onChange={(e) => setNewComment(e.target.value)}
                  placeholder="Write a comment..."
                  className={`flex-1 ${isDarkMode ? 'bg-gray-800 border-gray-700 text-white' : 'bg-white border-gray-200 text-gray-900'}`}
                  onKeyPress={(e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                      e.preventDefault()
                      handleSubmitComment()
                    }
                  }}
                />
                <Button 
                  onClick={handleSubmitComment}
                  disabled={!newComment.trim() || isSubmittingComment}
                  className="bg-blue-600 hover:bg-blue-700 text-white"
                >
                  {isSubmittingComment ? (
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  ) : (
                    'Post'
                  )}
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  )
}
